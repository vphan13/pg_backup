# Written by Vinh Phan
# 10/20/2024

# Postgres backup using Systemd timers
This script is a wrapper around pg_back package.  It enables directory backup of postgres databases which is multi-threaded to speed up backups and recoveries.

## Prerequisites
 * This has only been tested on RHEL/RPM based systems.
 * You will need the pigz binary installed 
```yum install pigz```
 * You will need the [pg_back rpm](https://github.com/orgrim/pg_back/releases/download/v2.4.0/pg-back-2.4.0-x86_64.rpm) package installed
```yum install https://github.com/orgrim/pg_back/releases/download/v2.4.0/pg-back-2.4.0-x86_64.rpm```
 * This script must be run as the postgres account

 * If you have a debian host [pg_back deb](https://github.com/orgrim/pg_back/releases/download/v2.5.0/pg-back_2.5.0_linux_amd64.deb)
 * The pgBackup.sh is a shell script and should work with deb systems but has not been tested.

## Usage
### Manual run
 * copy pgBackup.sh to /var/lib/pgsql and make sure it is executable
 * su over to the postgres account
 * make sure you have an nfs mount point to write backup/
 * make sure the BackupPath and BackupDir variables in pgBackup.sh 
exist and are accessible by the postgres account
 * You can manually run pgBackup.sh as the postgres user

### Systemd timer
 * copy pgBackup.sh to /var/lib/pgsql and make sure it is executable
 * make sure you have an nfs mount point to write backup/
 * make sure the BackupPath and BackupDir variables in pgBackup.sh 
 * copy pgBackup.timer and pgBackup.service to /etc/systemd/system/
``` cp pgBackup.timer pgBackup.service /etc/systemd/system/ && systemctl daemon-reload```
 * edit the timer file to specify run time and frequency
 * enable the timer
``` systemctl enable pgBackup.timer```

#### References
* [systemd/Timers](https://wiki.archlinux.org/index.php/Systemd/Timers#Realtime_timer)
* [How to use Systemd timers](https://www.certdepot.net/rhel7-use-systemd-timers/)
* [Use systemd timers instead of cronjobs](https://opensource.com/article/20/7/systemd-timers)
